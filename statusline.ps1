#!/usr/bin/env pwsh
# Generated by cc-statusline (https://www.npmjs.com/package/@chongdashu/cc-statusline)
# Custom Claude Code statusline - Created: 2025-08-27T06:56:04.634Z  
# Theme: detailed | Colors: true | Features: directory, git, model, context, usage, session, tokens, burnrate

$LOG_FILE = Join-Path $env:USERPROFILE ".claude\statusline.log"
$TIMESTAMP = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

# ---- logging ----
try {
    $logEntry = "[$TIMESTAMP] Status line triggered with input:"
    Add-Content -Path $LOG_FILE -Value $logEntry -ErrorAction SilentlyContinue
    # Handle input properly - could be from pipeline or args
    $input_data = ""
    if ($args.Count -gt 0) {
        $input_data = $args -join "`n"
    } elseif ($input) {
        $input_data = $input -join "`n"
    } else {
        # Read from stdin
        $input_data = [System.Console]::In.ReadToEnd()
    }
    try {
        $json_input = $input_data | ConvertFrom-Json -ErrorAction Stop
        Add-Content -Path $LOG_FILE -Value ($json_input | ConvertTo-Json -Depth 10) -ErrorAction SilentlyContinue
    } catch {
        Add-Content -Path $LOG_FILE -Value $input_data -ErrorAction SilentlyContinue
    }
    Add-Content -Path $LOG_FILE -Value "---" -ErrorAction SilentlyContinue
} catch {
    # Silently continue if logging fails
}

# ---- modern sleek colors (force colors for Claude Code) ----
$use_color = $true
if ($env:NO_COLOR) { $use_color = $false }

function Write-Color {
    param([string]$Color, [string]$Text)
    if ($use_color) {
        $esc = [char]27
        switch ($Color) {
            "DirColor" { Write-Host "${esc}[36m${Text}${esc}[0m" -NoNewline }  # cyan
            "ModelColor" { Write-Host "${esc}[35m${Text}${esc}[0m" -NoNewline }  # magenta
            "VersionColor" { Write-Host "${esc}[33m${Text}${esc}[0m" -NoNewline }  # yellow
            "CCVersionColor" { Write-Host "${esc}[37m${Text}${esc}[0m" -NoNewline }  # white/gray
            "StyleColor" { Write-Host "${esc}[90m${Text}${esc}[0m" -NoNewline }  # dark gray
            "GitColor" { Write-Host "${esc}[32m${Text}${esc}[0m" -NoNewline }  # green
            "ContextGood" { Write-Host "${esc}[32m${Text}${esc}[0m" -NoNewline }  # green
            "ContextWarning" { Write-Host "${esc}[33m${Text}${esc}[0m" -NoNewline }  # yellow
            "ContextDanger" { Write-Host "${esc}[31m${Text}${esc}[0m" -NoNewline }  # red
            "ContextColor" { Write-Host "${esc}[37m${Text}${esc}[0m" -NoNewline }  # white
            "UsageColor" { Write-Host "${esc}[34m${Text}${esc}[0m" -NoNewline }  # blue
            "CostColor" { Write-Host "${esc}[93m${Text}${esc}[0m" -NoNewline }  # bright yellow
            "BurnColor" { Write-Host "${esc}[33m${Text}${esc}[0m" -NoNewline }  # yellow
            "SessionGood" { Write-Host "${esc}[32m${Text}${esc}[0m" -NoNewline }  # green
            "SessionWarning" { Write-Host "${esc}[33m${Text}${esc}[0m" -NoNewline }  # yellow
            "SessionDanger" { Write-Host "${esc}[31m${Text}${esc}[0m" -NoNewline }  # red
            default { Write-Host $Text -NoNewline }
        }
    } else {
        Write-Host $Text -NoNewline
    }
}

# ---- time helpers ----
function ConvertTo-Epoch {
    param([string]$TimeString)
    try {
        $dt = [DateTime]::Parse($TimeString.Replace('Z', '+00:00'))
        return [int64](($dt.ToUniversalTime() - [DateTime]'1970-01-01').TotalSeconds)
    } catch {
        return $null
    }
}

function Format-TimeHM {
    param([int64]$Epoch)
    try {
        if ($Epoch -and $Epoch -gt 0) {
            $dt = [DateTime]::new(1970, 1, 1, 0, 0, 0, [DateTimeKind]::Utc).AddSeconds($Epoch).ToLocalTime()
            return $dt.ToString("HH:mm")
        }
        return ""
    } catch {
        try {
            # Fallback method
            $dt = [DateTime]'1970-01-01'.AddSeconds($Epoch).ToLocalTime()
            return $dt.ToString("HH:mm")
        } catch {
            return ""
        }
    }
}

function New-ProgressBar {
    param([int]$Percent = 0, [int]$Width = 10)
    if ($Percent -lt 0) { $Percent = 0 }
    if ($Percent -gt 100) { $Percent = 100 }
    $filled = [int]($Percent * $Width / 100)
    $empty = $Width - $filled
    return ('=' * $filled) + ('-' * $empty)
}

# ---- basics ----
try {
    Add-Content -Path $LOG_FILE -Value "DEBUG: Starting JSON parsing" -ErrorAction SilentlyContinue
    $json_data = $input_data | ConvertFrom-Json -ErrorAction Stop
    Add-Content -Path $LOG_FILE -Value "DEBUG: JSON parsing successful" -ErrorAction SilentlyContinue
    
    $current_dir = $null
    
    # Direct property access with explicit checks
    try {
        if ($json_data.workspace -and $json_data.workspace.current_dir -and $json_data.workspace.current_dir -ne "") {
            $current_dir = $json_data.workspace.current_dir
            Add-Content -Path $LOG_FILE -Value "DEBUG: Found workspace.current_dir = $current_dir" -ErrorAction SilentlyContinue
        }
        elseif ($json_data.cwd -and $json_data.cwd -ne "") {
            $current_dir = $json_data.cwd
            Add-Content -Path $LOG_FILE -Value "DEBUG: Found cwd = $current_dir" -ErrorAction SilentlyContinue
        }
        else {
            Add-Content -Path $LOG_FILE -Value "DEBUG: No valid directory found" -ErrorAction SilentlyContinue
            # Debug values
            $cwd_val = if ($json_data.cwd) { $json_data.cwd } else { "NULL" }
            $ws_val = if ($json_data.workspace) { "EXISTS" } else { "NULL" }
            $ws_dir_val = if ($json_data.workspace -and $json_data.workspace.current_dir) { $json_data.workspace.current_dir } else { "NULL" }
            Add-Content -Path $LOG_FILE -Value "DEBUG: cwd=$cwd_val, workspace=$ws_val, workspace.current_dir=$ws_dir_val" -ErrorAction SilentlyContinue
        }
    } catch {
        Add-Content -Path $LOG_FILE -Value "DEBUG: Error accessing directory properties: $($_.Exception.Message)" -ErrorAction SilentlyContinue
    }
    
    if (-not $current_dir) { $current_dir = "unknown" }
    
    # Keep original directory for session file lookup
    $original_dir = $current_dir -replace [regex]::Escape($env:USERPROFILE), "~"
    
    # Compress display directory to show only after GitHub
    $current_dir = $original_dir
    if ($current_dir -match "GitHub[/\\](.+)$") {
        $current_dir = $matches[1]
    } elseif ($current_dir -match "github[/\\](.+)$") {
        $current_dir = $matches[1]  
    }
    
    $model_name = $json_data.model.display_name
    if (-not $model_name) { $model_name = "Claude" }
    
    $model_version = $json_data.model.version
    $session_id = $json_data.session_id
    $cc_version = $json_data.version
    $output_style = $json_data.output_style.name
} catch {
    Add-Content -Path $LOG_FILE -Value "DEBUG: Exception caught: $($_.Exception.Message)" -ErrorAction SilentlyContinue
    $current_dir = "unknown"
    $model_name = "Claude"
    $model_version = ""
    $session_id = ""
    $cc_version = ""
    $output_style = ""
}

# ---- git ----
$git_branch = ""
try {
    $git_dir = git rev-parse --git-dir 2>$null
    if ($LASTEXITCODE -eq 0) {
        $git_branch = git branch --show-current 2>$null
        if (-not $git_branch) {
            $git_branch = git rev-parse --short HEAD 2>$null
        }
    }
} catch {
    # Git not available or not in a repo
}

# ---- context window calculation ----
$context_pct = ""
$context_color = "ContextColor"
$context_remaining_pct = 0

function Get-MaxContext {
    param([string]$ModelName)
    switch -Regex ($ModelName) {
        ".*Opus 4.*|.*opus 4.*|.*Opus.*|.*opus.*" { return 200000 }
        ".*Sonnet 4.*|.*sonnet 4.*|.*Sonnet 3\.5.*|.*sonnet 3\.5.*|.*Sonnet.*|.*sonnet.*" { return 200000 }
        ".*Haiku 3\.5.*|.*haiku 3\.5.*|.*Haiku 4.*|.*haiku 4.*|.*Haiku.*|.*haiku.*" { return 200000 }
        ".*Claude 3 Haiku.*|.*claude 3 haiku.*" { return 100000 }
        default { return 200000 }
    }
}

if ($session_id) {
    $MAX_CONTEXT = Get-MaxContext $model_name
    
    # Convert original dir to session file path
    $full_path = $original_dir -replace "~", $env:USERPROFILE
    $project_dir = $full_path -replace "[/\\:]", "-" -replace "^-", ""
    $session_file = Join-Path $env:USERPROFILE ".claude\projects\$project_dir\$session_id.jsonl"
    
    # Debug logging for session file path
    try {
        Add-Content -Path $LOG_FILE -Value "DEBUG: Looking for session file: $session_file" -ErrorAction SilentlyContinue
        Add-Content -Path $LOG_FILE -Value "DEBUG: Session file exists: $(Test-Path $session_file)" -ErrorAction SilentlyContinue
    } catch {}
    
    if (Test-Path $session_file) {
        try {
            $latest_tokens = Get-Content $session_file -Tail 20 | ForEach-Object {
                try {
                    $line_json = $_ | ConvertFrom-Json
                    if ($line_json.message.usage) {
                        $input_tokens = [int]($line_json.message.usage.input_tokens -as [int])
                        $cache_tokens = [int]($line_json.message.usage.cache_read_input_tokens -as [int])
                        return $input_tokens + $cache_tokens
                    }
                } catch {
                    return $null
                }
            } | Where-Object { $_ -ne $null } | Select-Object -Last 1
            
            # Debug logging for token calculation
            try {
                Add-Content -Path $LOG_FILE -Value "DEBUG: latest_tokens = $latest_tokens" -ErrorAction SilentlyContinue
            } catch {}
            
            if ($latest_tokens -and $latest_tokens -gt 0) {
                $context_used_pct = [int]($latest_tokens * 100 / $MAX_CONTEXT)
                $context_remaining_pct = 100 - $context_used_pct
                
                if ($context_remaining_pct -le 20) {
                    $context_color = "ContextDanger"
                } elseif ($context_remaining_pct -le 40) {
                    $context_color = "ContextWarning"
                } else {
                    $context_color = "ContextGood"
                }
                
                $context_pct = "$context_remaining_pct%"
            }
        } catch {
            # Error reading session file
        }
    }
}

# ---- ccusage integration ----
$session_txt = ""
$session_pct = 0
$session_bar = ""
$cost_usd = ""
$cost_per_hour = ""
$tpm = ""
$tot_tokens = ""
$session_color = "SessionGood"

try {
    $blocks_output = ""
    try {
        $blocks_output = npx ccusage@latest blocks --json 2>$null
    } catch {
        try {
            $blocks_output = ccusage blocks --json 2>$null
        } catch {
            # ccusage not available
        }
    }
    
    if ($blocks_output) {
        $blocks_data = $blocks_output | ConvertFrom-Json
        $active_block = $blocks_data.blocks | Where-Object { $_.isActive -eq $true } | Select-Object -First 1
        
        if ($active_block) {
            $cost_usd = $active_block.costUSD
            $cost_per_hour = $active_block.burnRate.costPerHour
            $tot_tokens = $active_block.totalTokens
            $tpm = $active_block.burnRate.tokensPerMinute
            
            $reset_time_str = $active_block.usageLimitResetTime
            if (-not $reset_time_str) { $reset_time_str = $active_block.endTime }
            $start_time_str = $active_block.startTime
            
            if ($reset_time_str -and $start_time_str) {
                $start_sec = ConvertTo-Epoch $start_time_str
                $end_sec = ConvertTo-Epoch $reset_time_str
                $now_sec = [int64](Get-Date -UFormat %s)
                
                if ($start_sec -and $end_sec) {
                    $total = $end_sec - $start_sec
                    if ($total -lt 1) { $total = 1 }
                    $elapsed = $now_sec - $start_sec
                    if ($elapsed -lt 0) { $elapsed = 0 }
                    if ($elapsed -gt $total) { $elapsed = $total }
                    $session_pct = [int]($elapsed * 100 / $total)
                    $remaining = $end_sec - $now_sec
                    if ($remaining -lt 0) { $remaining = 0 }
                    $rh = [int]($remaining / 3600)
                    $rm = [int](($remaining % 3600) / 60)
                    $end_hm = Format-TimeHM $end_sec
                    
                    # Debug logging
                    try {
                        Add-Content -Path $LOG_FILE -Value "DEBUG: end_sec=$end_sec, end_hm='$end_hm'" -ErrorAction SilentlyContinue
                    } catch {}
                    
                    if ($end_hm -and $end_hm -ne "") {
                        $session_txt = "{0}h {1}m until reset at {2} ({3}%)" -f $rh, $rm, $end_hm, $session_pct
                    } else {
                        $session_txt = "{0}h {1}m until reset ({2}%)" -f $rh, $rm, $session_pct
                    }
                    $session_bar = New-ProgressBar $session_pct 10
                    
                    $rem_pct = 100 - $session_pct
                    if ($rem_pct -le 10) { $session_color = "SessionDanger" }
                    elseif ($rem_pct -le 25) { $session_color = "SessionWarning" }
                    else { $session_color = "SessionGood" }
                }
            }
        }
    }
} catch {
    # ccusage integration failed
}

# ---- log extracted data ----
try {
    $log_data = "[$TIMESTAMP] Extracted: dir=$current_dir, model=$model_name, version=$model_version, git=$git_branch, context=$context_pct, cost=$cost_usd, cost_ph=$cost_per_hour, tokens=$tot_tokens, tpm=$tpm, session_pct=$session_pct"
    Add-Content -Path $LOG_FILE -Value $log_data -ErrorAction SilentlyContinue
} catch {
    # Silently continue if logging fails
}

# ---- render statusline ----
# Line 1: Core info (directory, git, model, claude code version, output style)
Write-Color "StyleColor" "DIR "
Write-Color "DirColor" $current_dir

if ($git_branch) {
    Write-Color "StyleColor" "  GIT "
    Write-Color "GitColor" $git_branch
}

Write-Color "StyleColor" "  MODEL "
Write-Color "ModelColor" $model_name

if ($model_version -and $model_version -ne "null") {
    Write-Color "StyleColor" "  VER "
    Write-Color "VersionColor" $model_version
}

if ($cc_version -and $cc_version -ne "null") {
    Write-Color "StyleColor" "  CC "
    Write-Color "CCVersionColor" "v$cc_version"
}

if ($output_style -and $output_style -ne "null") {
    Write-Color "StyleColor" "  STYLE "
    Write-Color "StyleColor" $output_style
}

# Line 2: Context and session time
$line2 = ""
if ($context_pct) {
    $context_bar = New-ProgressBar $context_remaining_pct 10
    $line2 = "CONTEXT Context Remaining: $context_pct [$context_bar]"
} else {
    $line2 = "CONTEXT Context Remaining: TBD"
}

if ($session_txt) {
    if ($line2) {
        $line2 = "$line2  TIME ${session_txt} [$session_bar]"
    } else {
        $line2 = "TIME ${session_txt} [$session_bar]"
    }
}

if ($line2) {
    Write-Host ""
    if ($context_pct) {
        Write-Color "StyleColor" "CONTEXT "
        Write-Color $context_color "Context Remaining: $context_pct [$context_bar]"
    } else {
        Write-Color "StyleColor" "CONTEXT "
        Write-Color $context_color "Context Remaining: TBD"
    }
    
    if ($session_txt) {
        Write-Color "StyleColor" "  TIME "
        Write-Color $session_color "${session_txt} [$session_bar]"
    }
}

# Line 3: Cost and usage analytics
$line3_parts = @()
if ($cost_usd -and $cost_usd -match "^[\d.]+$") {
    if ($cost_per_hour -and $cost_per_hour -match "^[\d.]+$") {
        $cost_per_hour_formatted = "{0:F2}" -f [double]$cost_per_hour
        $line3_parts += "COST `$$([double]$cost_usd | ForEach-Object { '{0:F2}' -f $_ }) (`$$cost_per_hour_formatted/h)"
    } else {
        $line3_parts += "COST `$$([double]$cost_usd | ForEach-Object { '{0:F2}' -f $_ })"
    }
}

if ($tot_tokens -and $tot_tokens -match "^[\d]+$") {
    if ($tpm -and $tpm -match "^[\d.]+$") {
        $tpm_formatted = "{0:F0}" -f [double]$tpm
        $line3_parts += "USAGE $tot_tokens tok ($tpm_formatted tpm)"
    } else {
        $line3_parts += "USAGE $tot_tokens tok"
    }
}

if ($line3_parts.Count -gt 0) {
    Write-Host ""
    for ($i = 0; $i -lt $line3_parts.Count; $i++) {
        if ($i -gt 0) { Write-Host "  " -NoNewline }
        $part = $line3_parts[$i]
        if ($part -match "COST") {
            Write-Color "StyleColor" "COST "
            $cost_part = $part -replace "COST ", ""
            Write-Color "CostColor" $cost_part
        } elseif ($part -match "USAGE") {
            Write-Color "StyleColor" "USAGE "
            $usage_part = $part -replace "USAGE ", ""
            Write-Color "UsageColor" $usage_part
        } else {
            Write-Host $part -NoNewline
        }
    }
}

Write-Host ""